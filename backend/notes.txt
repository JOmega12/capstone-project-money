To see what dependencies you have instaleld without requirements you have installed:

- First activate your virtual env
- then `pip freeze > requirements.txt`
- then write it down in your requirements.txt 

- in another computer that you are working from:
- ` pip install -r requirements.txt`


To get into virtual environment:
.\venv\Scripts\activate

.\.venv\Scripts\activate


To start project:
`django-admin startproject testAdmin .` 

In order to have a better, clean reusable code, it is better to have separate apps within a project.
Meaning, each app is an endpoint itself that connects to one another where the main controller (startproject) is the one that controls the urls


After creating the app, register to admin of your Models from models.py

Then in the URL

views in app folder is how you query the data(much like PRISMA ORM)


On Creating User Models for user:
- When creating user models, AbstractBaseUser creates a very flexible way for the end user. You can basically customize the way logins/signups are compared to:
- the AbstractUser which uses Django's own model with slight tweaks here and there 



python manage.py runserver -> site/admin
jensenadmin
admin@admin.com
pythonproject
Test12345

on Serializers:
- ModelSerializers is basic, .Serializers is more customized form of code
-ModelSerializrs are more simple to setup




on Views basic attributes: 

- this is what a basic serializer looks like:
`
from django.contrib.auth.models import User
from myapp.serializers import UserSerializer
from rest_framework import generics
from rest_framework.permissions import IsAdminUser

class UserList(generics.ListCreateAPIView):
    queryset = User.objects.all()
    serializer_class = UserSerializer
    permission_classes = [IsAdminUser]
`

The urls are fine, but the what I learned is that the Views are more important because they show what type is going on under the hood

An example of separating REST structure in transactions/views.py:
The Views separating TransactionList and TransactionDetail emphasize two different functions.

The TransactionList lists all the data and posts data on creating a new transaction. 

The TransactionDetail is responsible for single transactions such as retrieving, updateed, or deleting. Emphasized via using a primary foreign key that is specific to the user


Look at 

https://testdriven.io/blog/django-custom-user-model/




endpoints:
for users/

/api/login
/api/register
/api
/api/logout


for transactions/ :
api/
api/<int:pk>


for budget-categories/ :
api/
api/<int:pk>


for user_budget_categories_junction/:
api/
api/<int:pk>



testingadmin
Testingpassword