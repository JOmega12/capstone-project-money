To see what dependencies you have instaleld without requirements you have installed:

- First activate your virtual env
- then `pip freeze > requirements.txt`
- then write it down in your requirements.txt 

- in another computer that you are working from:
- ` pip install -r requirements.txt`


To get into virtual environment:
.\venv\Scripts\activate

.\.venv\Scripts\activate


To start project:
`django-admin startproject testAdmin .` 

In order to have a better, clean reusable code, it is better to have separate apps within a project.
Meaning, each app is an endpoint itself that connects to one another where the main controller (startproject) is the one that controls the urls


After creating the app, register to admin of your Models from models.py

Then in the URL

views in app folder is how you query the data(much like PRISMA ORM)


On Creating User Models for user:
- When creating user models, AbstractBaseUser creates a very flexible way for the end user. You can basically customize the way logins/signups are compared to:
- the AbstractUser which uses Django's own model with slight tweaks here and there 



python manage.py runserver -> site/admin
jensenadmin
admin@admin.com
pythonproject
Test12345

on Serializers:
- ModelSerializers is basic, .Serializers is more customized form of code
-ModelSerializrs are more simple to setup


on Views basic attributes: 

- this is what a basic serializer looks like:
`
from django.contrib.auth.models import User
from myapp.serializers import UserSerializer
from rest_framework import generics
from rest_framework.permissions import IsAdminUser

class UserList(generics.ListCreateAPIView):
    queryset = User.objects.all()
    serializer_class = UserSerializer
    permission_classes = [IsAdminUser]
`

The urls are fine, but the what I learned is that the Views are more important because they show what type is going on under the hood

An example of separating REST structure in transactions/views.py:
The Views separating TransactionList and TransactionDetail emphasize two different functions.

The TransactionList lists all the data and posts data on creating a new transaction. 

The TransactionDetail is responsible for single transactions such as retrieving, updateed, or deleting. Emphasized via using a primary foreign key that is specific to the user


Look at 

https://testdriven.io/blog/django-custom-user-model/




endpoints:
for users/

/api/login
/api/register
/api
/api/logout


for transactions/ :
api/
api/<int:pk>


for budget-categories/ :
api/
api/<int:pk>


for user_budget_categories_junction/:
api/
api/<int:pk>



for example/:
api/ 
** this also gets to show the items and post request
**post request on Postman


testingadmin
Testingpassword


8/19/24
What I am finding and struggling: JWT tokens and trying to get the tokens to receive and then be able to access users own data

I created a separated project that only has two endpoint Items and Users and Im trying to get the users to register a token. 

If I cannot figure out how to get the access tokens for jwt, i will change strategy to using Django's own token authentication to move the project forward


9/16/2024
I highlight the benefits of the functional vs classes

demonstates the curiosity for django that is usually class based 

django classes? vs django functional?


also to previous notes, I used jwtTokens, but isntead of scouringl what people did, I used the documentation and supplemented the og docs with youtube tutorials that implemented the jwt token logins -> functional programming


Current problem: how to create generic categories for each user to use and how they can create their own categories specific to their own data/account


Potential solution: using signals in Djangos

9/17/2024

After some research I came across how signals could be used in django because it listens to creating a user and then each user will automatically have a predisposed amount of categories and can add their own categories specific to the transaction


9/21/2024

Since for each category, has many Transactions, it would show how many transactions are in each category when you FETCH(GET) for the category ( i know it's a word vomit)

As a result, you would see the Transaciton model have a category on its own but the category model doesn't.
In the category_budget serializer.py, the transactionSerializer is there for each category I am able to serialze and include all the transactions related to each category when I retrieve or return the data



9/22/2024
need to create patch and delete for transactions

and

create frontend endpoints for budget categories(get, create,patch, delete)



10/3/2024

fixed transactionTypes issue where the backend would not show the full models of Transaction like transactionType. Found out that transactionType in models.py/transactions has a comma after which created a tuple, which is a collection of objects separated by commas


10/4/2024

Implemented a change feature where user can change the name, amount and transaction type.

However, there is a bug where i cannot change the value and needs to changed

Things that still need to do on top of above:
- create a delete functionality for transaction
- create frontend endpoints for budget categories(get, create,patch, delete)


10/5/2024
- fixed check mark issue
- added delete functionality
- 



10/9/2024
- new bug when you login the refresh token does not refresh for frontend(user)

- I need to create the createCategory and then be able to GET the categories with their transactions and show the transactions for the specific userID there
- Also need to:
    -create fix Category and Delete category


10/10/2024
Curent problem:
- Cannot get the data from the category provider to show
-Fixed: the provider was not in the direct line


Curent problem, how to add the transaction to the category and then also show the transactions when youre looking inside the category



10/14/2024
New Notes on adding Category names that is associated on transactions.

In the Transactions, I had a hard time trying to get the name of the category that the transaction is in.

For example, Transaction would have this data point:
    {
        "id": 15,
        "transactionName": "Freelance1",
        "transactionAmount": "1000.00",
        "transactionType": "income",
        "createdAt": "2024-10-09",
        "user": 4,
        "category": 1
    },

As you can see, category is only 1. 
But in the category section is shows:
    {
        "id": 1,
        "name": "Food",
        "user": 4,
        "is_custom": false,
        "transactions": [
            {
                "id": 15,
                "transactionName": "Freelance1",
                "transactionAmount": "1000.00",
                "transactionType": "income",
                "createdAt": "2024-10-09",
                "user": 4,
                "category": 1
            }
        ]
    },

Meaning the id of the category in the transaction is associated to this data point

And I was having a hard time trying to get the name of the category in Transaction associated with the NUMBER of the category id

So, I created a helper function that would compare the id of the categories id and the categoryId so that if they were equal, it would show the category name by mapping the category state from the category provider that was already in the api

I am going to do the same for the transactions as well




Things that are currently being worked on:
- Trying to change/PATCH the Categories within the transactions
- Create, Patch, and Delete Category endpoints


10/15-16/2024

Still working on creating the edit for transaction and category


Need to work on: 
- how to tie in adding in a category in transaction
- might need to create a category separately then tie it back in when creating a transaction


10/18/2024
Still working on code

10/19/ 2024
Fixed:
In createTest folder, I added and fixed a feature where it would create a Transaction without a category. What I did was that I would use a category to select the already existing catalog of categories to be put inside the Transaction.

In addition , even if the user doesnt add the category on its own, it would automatically use the first category as a default


10/21/2024
Added and fixed isCustom for when creating a new category

Need to add the fixCategory(PATCH) and deleteCategory endpoints 


10/27/2024
Fixed PATCH Backend because the view was not picking up the object on the PATCH endpoint which shows a 400 error every time i click the change user_budget_categories_junction.

As a result, I fixed it by adding the method .objects (explain why it's important to have this when calling the model later) in the PATCH backend 

I also fixed the POST Backend because it was not creating the category in the frontend despite being able to to create a category in the backend which shows me that the problem wasn't in the backend but the frontend.

After looking at the component responsible for creating the category, I realized that it wasn't the component where the input lives was the problem. Rather, the problem was in the provider where the calling the API from the backend was.

It was the smallest problem that one could mistake. In the method, I accidentally wrote "CREATE" rather than "POST" in the code. After changing it, I was able to create my category